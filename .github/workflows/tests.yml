name: tests

on:
  push:
    branches:
      - master
    tags-ignore:
      - '**'
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs: # Docs: <https://help.github.com/en/articles/workflow-syntax-for-github-actions>
  gitleaks:
    name: GitLeaks
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v3
        with: {fetch-depth: 0, version: 8.16.0}

      - name: Check for GitLeaks
        with: {version: 8.16.0}
        uses: gacts/gitleaks@v1.1.4 # Action page: <https://github.com/gacts/gitleaks>

  check-style:
    name: Run check style (PHP cs fixer)
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.setup }}-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer update -n --prefer-dist --no-progress --ansi && composer info

      - name: Run php-cs-fixer
        run: composer check-style

  tests:
    name: Run PHPUnit/Feature tests
    runs-on: ubuntu-20.04
    timeout-minutes: 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 # Action page: <https://github.com/shivammathur/setup-php>
        with:
          php-version: '8.1'

      - name: Get Composer Cache Directory # Docs: <https://git.io/JfAKn#php---composer>
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies # Docs: <https://git.io/JfAKn#php---composer>
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.setup }}-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer update -n --prefer-dist --no-progress --ansi && composer info

      - name: Start mariadb server # Docs: <https://github.com/marketplace/actions/actions-setup-mysql>
        uses: shogo82148/actions-setup-mysql@v1
        with:
          distribution: 'mariadb'
          mysql-version: '10.8'
          user: 'forge'
          password: 'forge'

      - name: Create database
        run: mysql -h 127.0.0.1 -P 3306 -u root -e 'CREATE DATABASE forge;'

      - name: Database migrate
        run: |
          sleep 8
          cp .env.example .env
          sed -i 's/DB_HOST=mysql/DB_HOST=127.0.0.1/' .env
          sed -i 's/CACHE_DRIVER=redis/CACHE_DRIVER=file/' .env
          php artisan key:generate
          php artisan migrate
          php artisan passport:init
          php artisan cache:clear

      - name: Run PHPUnit/Feature tests
        run: php artisan test

  phpstan:
    name: Run PHPStan (Static Analysis Tool)
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.setup }}-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer update -n --prefer-dist --no-progress --ansi && composer info

      - name: Run PHPStan
        run: composer phpstan-xdebug

  docker-image:
    name: Build docker image
    runs-on: ubuntu-20.04
    needs: [tests, phpstan]
    timeout-minutes: 10
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Build image
        run: docker build -t app:local -f ./Dockerfile .

      - name: Show PHP and Laravel versions, installed in docker image
        run: docker run --rm app:local sh -c "php -v && php artisan -V"

      - name: Save docker image
        run: docker save app:local > ./docker-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ./docker-image.tar
          retention-days: 1

  #docker-image-scan:
  #  name: Scan docker image for vulnerabilities
  #  runs-on: ubuntu-20.04
  #  needs: [docker-image]
  #  continue-on-error: true
  #  steps:
  #    - name: Download built docker image
  #      uses: actions/download-artifact@v3
  #      with:
  #        name: docker-image
  #        path: .artifact
  #
  #    - name: Prepare image to run
  #      working-directory: .artifact
  #      run: docker load < docker-image.tar
  #
  #    - name: Scan image
  #      uses: anchore/scan-action@v3 # action page: <https://github.com/anchore/scan-action>
  #      with:
  #        image: app:local
  #        #severity-cutoff: medium # negligible, low, medium, high or critical

  docker-image-e2e:
    name: Docker image End-to-End tests (SSL ${{ matrix.ssl }})
    runs-on: ubuntu-20.04
    needs: [docker-image]
    strategy:
      fail-fast: false
      matrix:
        ssl: [on, off]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create docker network
        run: docker network create "web"

      - name: Start mysql server
        run: |
          docker run --rm -d \
            --network "web" \
            --name=mysql \
            -p "3306:3306" \
            -e "MYSQL_DATABASE=forge" \
            -e "MYSQL_USER=forge" \
            -e "MYSQL_PASSWORD=forge" \
            -e "MYSQL_ROOT_PASSWORD=forge" \
              mariadb:10.8.2-rc-focal

      - name: Start redis server
        run: |
          docker run --rm -d \
            --network "web" \
            --name=redis \
            -p "6379/tcp" \
              redis:7-alpine \
                redis-server --requirepass redis_password

      - name: Start elasticsearch server
        run: |
          docker run --rm -d \
            --network "web" \
            --name=elasticsearch \
            -e "ES_JAVA_OPTS=-Xms24m -Xmx24m" \
            -e "xpack.license.self_generated.type=trial" \
            -e "xpack.security.enabled=false" \
            -e "cluster.name="docker-cluster"" \
            -e "network.host=0.0.0.0" \
            -e "ELASTIC_PASSWORD=forge"\
            -p "9200:9200" \
              elasticsearch:8.4.3

      - name: Download built docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .artifact

      - name: Prepare image to run
        working-directory: .artifact
        run: docker load < docker-image.tar

      - name: Migrating database
        run: |
          docker run --rm \
            --network "web" \
            -e "DB_HOST=mysql" \
            -e "DB_CONNECTION=mysql" \
            -e "DB_DATABASE=forge" \
            -e "DB_USERNAME=forge" \
            -e "DB_PASSWORD=forge" \
              app:local \
                php artisan migrate --force

      - name: Start application queue worker
        run: |
          docker run --rm -d \
            --network "web" \
            -e "REDIS_HOST=redis" \
            -e "REDIS_PASSWORD=redis_password" \
            -e "DB_HOST=mysql" \
            -e "DB_DATABASE=forge" \
            -e "DB_USERNAME=forge" \
            -e "DB_PASSWORD=forge" \
              app:local \
                php artisan queue:work --memory=256 --sleep=1

      - name: Start application HTTP server
        run: |
          docker run --rm -d \
            --network "web" \
            -p "8080:8080/tcp" \
            -p "8443:8443/tcp" \
            -e "REDIS_HOST=redis" \
            -e "REDIS_PASSWORD=redis_password" \
            -e "DB_HOST=mysql" \
            -e "DB_DATABASE=forge" \
            -e "DB_USERNAME=forge" \
            -e "DB_PASSWORD=forge" \
            -e "ELASTICSEARCH_ENABLED=true" \
            -e "ELASTICSEARCH_HOSTS=elasticsearch:9200" \
            -e "ELASTICSEARCH_SCHEME=http" \
            -e "ELASTICSEARCH_USER=elastic" \
              app:local \
                rr serve -c .rr.yaml

      - name: Generate values for tests running
        id: values
        run: echo "::set-output name=base_url::`[ "${{ matrix.ssl }}" = "on" ] && echo "https://localhost:8443" || echo "http://localhost:8080"`"

      # Image page: <https://hub.docker.com/r/postman/newman>,
      # CLI options: <https://www.npmjs.com/package/newman#command-line-options>
      - name: Run Newman
        run: |
          docker run --rm --tty \
            --net host \
            --volume "$(pwd):/rootfs:ro" \
            --workdir "/rootfs/tests/postman" \
              postman/newman:5.2-alpine run ./default.postman_collection.json \
                --env-var "base_url=${{ steps.values.outputs.base_url }}" \
                --insecure \
                --color on
